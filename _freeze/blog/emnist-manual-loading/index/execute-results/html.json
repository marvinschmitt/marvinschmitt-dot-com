{
  "hash": "a4c475f602fe0b809d73dfc2730a2100",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Download EMNIST manually\"\ndescription: \"EMNIST is a classic image data set for machine learning. Sometimes the automatic PyTorch download fails, that bugs me. Here's a quick guide to download the EMNIST data set manually and make it work with PyTorch.\"\ndate: 04-15-2024\ncategories: \n  - programming\n  - python\n  - machine learning\n  - technical\ndraft: false\nnumber-sections: false\nimage: emnist-manual-loading-thumbnail.png\nformat:\n  html:\n    fig-cap-location: bottom\n    include-before-body: ../../html/margin_image.html\n    include-after-body: ../../html/blog_footer.html\n    comments: false\neditor: \n  markdown: \n    wrap: sentence\n---\n\n:::{.callout}\nThis is a quick reference for my future self, maybe it's helpful for you as well.\n\n**TL;DR:** Manual EMNIST data download requires directory name updates to make `PyTorch` happy. Need `./EMNIST/raw/<binaries>`.\n:::\n\n## Problem: Automatic EMNIST download failed\n\nEarlier today, I wanted to reproduce the results of a machine learning paper that uses the EMNIST digits data set to train a `PyTorch` model.\nNormally, PyTorch makes loading *and even downloading* data sets extremely easy for us.\nThe `torchvision.datasets` module provides a handful of commonly used data sets with a user-friendly API.\nMost importantly for us right now, the data set loaders come with the convenient `download=True` argument to download a data set automatically:\n\n::: {#95162dd1 .cell execution_count=1}\n``` {.python .cell-code}\nimport torchvision\n\ntrain_data = torchvision.datasets.EMNIST(\n  root=\"./\", \n  split=\"digits\", \n  train=True,\n  download=True\n)\n```\n:::\n\n\nUnfortunately, that throws a `RuntimeError`:\n\n```\nRuntimeError: File not found or corrupted.\n```\n\nNext, I wanted to just *download* the data from a URL via `torchvision.datasets.util.download_url(...)`.\nI found a handful of EMNIST URLs on the internet, but either got the same old `File not found or corrupted` or an SSL error.\n\n## Fix: Manual download and directory adjustments\n\nHere's a brief list of steps for downloading the EMNIST data manually and then preparing the directory for `torchvision.datasets.EMNIST(..., download=False)`.\n\n### Step 1: Download the files\n\nGo to the official [EMNIST website (Link)](https://www.nist.gov/itl/products-and-services/emnist-dataset) and head to *Binary format as the original MNIST dataset*.\nAlternatively, here's the link: [EMNIST Direct Download Link](https://biometrics.nist.gov/cs_links/EMNIST/gzip.zip)\n\nThat archive with the great name `gzip.zip` has a size of approximately 500MB.\n\n\n### Step 2: Unpack the `gzip.zip` archive\n\nHead to your project's data directory (or global data directory if you have that) and unpack the previously downloaded `gzip.zip` archive there.\nYou will get a folder `gzip/` that contains a whole lot of `*.gz` files:\n\n```\n.\n└── gzip\n    ├── emnist-balanced-mapping.txt\n    ├── emnist-balanced-test-images-idx3-ubyte.gz\n    ├── emnist-balanced-test-labels-idx1-ubyte.gz\n    ├── emnist-balanced-train-images-idx3-ubyte.gz\n    ├── emnist-balanced-train-labels-idx1-ubyte.gz\n    ├── ...\n    ├── emnist-digits-mapping.txt\n    ├── emnist-digits-test-images-idx3-ubyte.gz\n    ├── emnist-digits-test-labels-idx1-ubyte.gz\n    ├── emnist-digits-train-images-idx3-ubyte.gz\n    ├── emnist-digits-train-labels-idx1-ubyte.gz\n    ├── ...\n    ├── emnist-mnist-mapping.txt\n    ├── emnist-mnist-test-images-idx3-ubyte.gz\n    ├── emnist-mnist-test-labels-idx1-ubyte.gz\n    ├── emnist-mnist-train-images-idx3-ubyte.gz\n    └── emnist-mnist-train-labels-idx1-ubyte.gz\n```\n\n:::{.callout-note}\n## EMNIST splits\n\nYou'll notice a structure: There are different splits, encoded in the filenames as `emnist-<split>-...`. \nThis `<split>` corresponds to the `split=...` argument in `torchvision.datasets.EMNIST`.\nFor this project, I only needed the `digits` split, so I deleted the files of all the other splits.\n:::\n\n### Step 3: Unpack the individual `.gz` files\n\nUnpack all the `*.gz` files that you need.\nOn MacOS, the built-in archive tools can handle `.gz` files, YMMV.\nDelete the `*.gz` files after you're done unpacking.\nYou should have the following structure now:\n\n```\n.\n└── gzip\n    ├── emnist-balanced-mapping.txt\n    ├── emnist-balanced-test-images-idx3-ubyte\n    ├── emnist-balanced-test-labels-idx1-ubyte\n    ├── emnist-balanced-train-images-idx3-ubyte\n    ├── emnist-balanced-train-labels-idx1-ubyte\n    ├── ...\n    ├── emnist-digits-mapping.txt\n    ├── emnist-digits-test-images-idx3-ubyte\n    ├── emnist-digits-test-labels-idx1-ubyte\n    ├── emnist-digits-train-images-idx3-ubyte\n    ├── emnist-digits-train-labels-idx1-ubyte\n    ├── ...\n    ├── emnist-mnist-mapping.txt\n    ├── emnist-mnist-test-images-idx3-ubyte\n    ├── emnist-mnist-test-labels-idx1-ubyte\n    ├── emnist-mnist-train-images-idx3-ubyte\n    └── emnist-mnist-train-labels-idx1-ubyte\n```\n\n### Step 4: Adjust the directory structure for PyTorch\n\nIf we try to load the data set into PyTorch with the `download=False` argument now,\n\n::: {#d0320b44 .cell execution_count=2}\n``` {.python .cell-code}\ntrain_data = torchvision.datasets.EMNIST(\n  root=\"./\", \n  split=\"digits\", \n  train=True,\n  download=False\n)\n```\n:::\n\n\nwe get the following error:\n\n```\nRuntimeError: Dataset not found. You can use download=True to download it\n```\n\nWell, we kind of did all the downloading so that we don't need the problematic `download=True`... \nAs you can imagine, we have to (1) point `PyTorch` to where our EMNIST data lives; and (2) make the EMNIST data fit the format that `PyTorch` expects:\n\n```\nDATASET_NAME\n└── raw\n    ├── ...-mapping.txt\n    ├── ...-ubyte\n```\n\nSo, we change `gzip` to `raw` and wrap the entire `raw` folder into a folder named `EMNIST`.\nYour file tree should look like this now:\n\n```\nEMNIST\n└── raw\n    ├── emnist-balanced-mapping.txt\n    ├── emnist-balanced-test-images-idx3-ubyte\n    ├── emnist-balanced-test-labels-idx1-ubyte\n    ├── emnist-balanced-train-images-idx3-ubyte\n    ├── emnist-balanced-train-labels-idx1-ubyte\n    ├── ...\n    ├── emnist-digits-mapping.txt\n    ├── emnist-digits-test-images-idx3-ubyte\n    ├── emnist-digits-test-labels-idx1-ubyte\n    ├── emnist-digits-train-images-idx3-ubyte\n    ├── emnist-digits-train-labels-idx1-ubyte\n    ├── ...\n    ├── emnist-mnist-mapping.txt\n    ├── emnist-mnist-test-images-idx3-ubyte\n    ├── emnist-mnist-test-labels-idx1-ubyte\n    ├── emnist-mnist-train-images-idx3-ubyte\n    └── emnist-mnist-train-labels-idx1-ubyte\n```\n\nFinally, the call to the `PyTorch` data loader will work as intended:\n\n::: {#e1315fba .cell execution_count=3}\n``` {.python .cell-code}\ntrain_data = torchvision.datasets.EMNIST(\n  root=\"./\", \n  split=\"digits\", \n  train=True,\n  download=False\n)\n```\n:::\n\n\nIf your `EMNIST/` folder lives somewhere else (e.g., in a dedicated `data/` folder=, just tell PyTorch via `root=path/to/your/data/folder/`.\n\n### Step 5: Profit!\n\nNow off you go and make some fancy machine learning stuff with EMNIST! ✨\n\n\n--Marvin\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}