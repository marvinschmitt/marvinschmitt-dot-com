{
  "hash": "987aba4ff866199596e2aa7e1a5709a9",
  "result": {
    "markdown": "---\ntitle: \"Pre-releasing the {ggsimplex} R package\"\ndescription: \"Here's a quick rundown of this ggplot extension for point plots and density plots in a (2-)simplex. These can be used to visualize compartmental data, posterior model probabilities, or densities with support on a probability simplex.\"\ndate: 02-03-2023\ncategories: \n  - statistics\n  - R\n  - programming\n  - visualization\nimage: \"figures/ggsimplex-hexsticker-thumbnail.png\"\ndraft: false\n\nformat: \n  html:\n    fig-width: 6\n    out.width: \"85%\"\n    fig-align: center\n    include-before-body: ../../html/margin_image.html\n    include-after-body: ../../html/blog_footer.html\nexecute:\n  warning: false\n    \n---\n\n\n\n\n\nOur latest manuscript [Meta-Uncertainty in Bayesian Model Comparison](https://arxiv.org/pdf/2210.07278.pdf) has been accepted to AISTATS 2023! That's a reason to celebrate ðŸŽ‰ At the same time, this means that a lot of people hear about the project and some are interested in the code. So far, so good. Of course, we have released the software code for the paper in a [public GitHub repository](https://github.com/marvinschmitt/MetaUncertaintyPaper).\nBut there is one problem. The fancy triangular density plots use an internal and highly experimental ggplot extension: [`{ggsimplex}`](https://github.com/marvinschmitt/ggsimplex) ([GitHub source](https://github.com/marvinschmitt/ggsimplex))\n\nWe planned to release [`{ggsimplex}`](https://github.com/marvinschmitt/ggsimplex) at some point next year, but now we feel like at least the experimental version should be made public for the AISTATS paper. This blog post gives a brief rundown of the package.\n\n## What is a simplex?\n\nA simplex is the generalization of a triangle to $n$ dimensions. In this blog post, we are exclusively interested in 2-simplices, that is: triangles.\n\n::: {#fig-simplices}\n\n![](figures/illustration_simplices.png){}\n\nExamples of some $n$-simplices: point, line, triangle, and tetrahedron.\n:::\n\nThe mathematical formulation for everything within a ($J-1$) simplex $\\Delta$ is pretty uncanny:\n\n$$\n\t\t\t\\Delta = \n\t\t\t\\left\\{\n\t\t\t\tx\\in\\mathbb{R}^J: x = \\sum\\limits_{j=1}^J\\pi_j v_j\n\t\t\t\t\\quad\n\t\t\t\t\\text{with}\n\t\t\t\t\\quad\n\t\t\t\t0\\leq \\pi_j \\leq 1, \\sum\\limits_{j=1}^J\\pi_j=1\n\t\t\t\\right\\}.\n$$\n\nThis sounds overly complex, but it basically just says \"a vector of numbers that is non-negative, sums to one, and lies within the vertices\".\n\nBut why would we care about simplices? It turns out that some interesting data types actually live in simplices (plural of simplex).\nOne example are compartmental data: By volume, the dry air in Earthâ€™s atmosphere is about 78 percent nitrogen, 21 percent oxygen, and 1 percent argon ([source](https://climate.nasa.gov/news/2915/the-atmosphere-getting-a-handle-on-carbon-dioxide/)). These percentages sum to one and can be visualized in a simplex.\nThe main reason for me to develop the [`{ggsimplex}`](https://github.com/marvinschmitt/ggsimplex)` page are so-called posterior model probabilities.\n\nSay we compare $J$ different candidate models $M_1, \\ldots, M_J$ in a Bayesian setting and we want to assess their fit to a data set $y$. Then, we can use Bayes' formula (through some intricate computational methods) to estimate the probability of each model given the observed data, namely the posterior model probability (PMP) for each model $M_j$: $p(M_j\\,|\\,y)$.\nBy definition, the PMPs sum to one: $\\sum_{j=1}^J p(M_j\\,|\\, y)=1$.\nSo PMPs on a fixed data set are data that live within a simplex ðŸ¤©\nEnough preface, let's jump in.\n\n## Installation\n\nYou can install [`{ggsimplex}`](https://github.com/marvinschmitt/ggsimplex) from GitHub via the `{devtools}` package, and then load it along with `{ggplot2}`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndevtools::install_github('marvinschmitt/ggsimplex')\nlibrary(ggsimplex)\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Canvas setup\n\nIn the experimental stage, the first step for every simplex plot is setting up the canvas by setting the aspect ratio, clearing the frame, and drawing the triangular border:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1))+\n  theme_void() +\n  geom_simplex_canvas()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=288}\n:::\n:::\n\n\n## Point plots\n\nWe sample some data from a distribution with support on the simplex, such as the [Dirichlet distribution](https://en.wikipedia.org/wiki/Dirichlet_distribution). This is conveniently implemented in `{brms}` through `brms::rdirichlet`.\nWe need some more preprocessing and bind the simplex data into a single column `pmp`. The `make_list_column` function implements the list column conversion.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(brms)\ndata = rdirichlet(n = 100, alpha = c(1,2,3))\ndata = as.data.frame(data)\ncolnames(data) = c(\"pmp_1\", \"pmp_2\", \"pmp_3\")\n\ndata$pmp = with(data, make_list_column(pmp_1, pmp_2, pmp_3))\n```\n:::\n\n\nNow we use `geom_simplex_point` and pass the data into the `pmp` asthetic (short for \"posterior model probabilities\"). The other arguments of `geom_simplex_point` are basically identical to the standard `geom_point` -- we can use arguments like `size`, `color`, and `alpha`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1))+\n  theme_void() +\n  geom_simplex_canvas() + \n  geom_simplex_point(data = data, aes(pmp = pmp),\n                     size = 0.7, color = \"firebrick\", alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=288}\n:::\n:::\n\n\n\n## Density plots\n\nNow we want to plot an analytic density which is defined on the simplex. Let's take the Dirichlet density from the example above with $\\alpha=(1,2,3)$.\nWe prepare the data in a data frame, which might seem overly complex at this point -- but it will come in handy when we want to take advantage of advanced ggplot features such as [faceting](https://ggplot2.tidyverse.org/reference/facet_grid.html).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf_dirichlet = data.frame(true_model = 1)\ndf_dirichlet$Alpha = list(c(1, 2, 3))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1))+\n  theme_void() +\n  geom_simplex_canvas() + \n  stat_simplex_density(data=df_dirichlet, fun = ddirichlet,\n                       args = alist(Alpha=Alpha))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=288}\n:::\n:::\n\n\nThe modular structure of ggplot allows us to plot the scatter on top of the density plot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1))+\n  theme_void() +\n  geom_simplex_canvas() + \n  stat_simplex_density(data=df_dirichlet, fun = ddirichlet,\n                       args = alist(Alpha=Alpha)) +\n  geom_simplex_point(data = data, aes(pmp = pmp),\n                   size = 0.7, color = \"firebrick\", alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=288}\n:::\n:::\n\n\n\n## Faceting\n\nOne core idea of the [Meta-Uncertainty Framework](https://arxiv.org/pdf/2210.07278.pdf) lies in analyzing the model-implied posterior model probability distributions (= pushforward of the prior predictive) of different data generating models. So let's look at simplex data from three differently parameterized Dirichlet distributions. We simulate the data into separate data frames, then bind them and create the list column `pmp`. Then, we save the parameters of the underlying Dirichlet distributions in the data frame `df_dirichlet` again so that we can generate density plots as above.^[The data preparation could be way more generic and elegant, but for the sake of clearness, this blog post sacrifices some elegance ðŸ˜‰]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nalpha_1 = c(1, 2, 3)\ndata_1 = data.frame(true_model = 1, rdirichlet(n = 100, alpha = alpha_1))\n\nalpha_2 = c(2, 5, 1)\ndata_2 = data.frame(true_model = 2, rdirichlet(n = 100, alpha = alpha_2))\n\nalpha_3 = c(4, 2, 2)\ndata_3 = data.frame(true_model = 3, rdirichlet(n = 100, alpha = alpha_3))\n\ndata = rbind(data_1, data_2, data_3)\ncolnames(data) = c(\"true_model\", \"pmp_1\", \"pmp_2\", \"pmp_3\")\ndata$pmp = with(data, make_list_column(pmp_1, pmp_2, pmp_3))\n\ndf_dirichlet = data.frame(true_model = 1:3)\n\ndf_dirichlet$Alpha = list(alpha_1, alpha_2, alpha_3)\n```\n:::\n\n\nNow that the column `true_model` identifies the different data generating processes, we can simply add the `facet_grid` and the ggplot magic happens:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1))+\n  theme_void() +\n  geom_simplex_canvas() + \n  stat_simplex_density(data=df_dirichlet, fun = ddirichlet,\n                       args = alist(Alpha=Alpha)) +\n  geom_simplex_point(data = data, aes(pmp = pmp),\n                   size = 0.7, color = \"firebrick\", alpha = 0.3) +\n  facet_grid(~true_model, labeller=label_both)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n\n### Other distributions\n\nThe `stat_simplex_density` function is designed to accept a density function and a list of parameters. So we can simply pass the density function of a [logistic Normal distribution](https://en.wikipedia.org/wiki/Logit-normal_distribution#Multivariate_generalization), as implemented in `brms::dlogistic_normal`. The logistic normal distribution is parameterized by $\\mu$ and $\\Sigma$, so we pass these parameters in a list column, grouped by the true model because we want a nice facet plot.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmu_1 = c(0, 0)\nSigma_1 = matrix(c(1, 0, 0, 1), nrow=2, byrow=TRUE)\ndata_1 = data.frame(true_model = 1, \n                    rlogistic_normal(n = 100, mu = mu_1, Sigma = Sigma_1))\n\nmu_2 = c(0, 0)\nSigma_2 = matrix(c(0.3, 0, 0, 0.3), nrow=2, byrow=TRUE)\ndata_2 = data.frame(true_model = 2, \n                    rlogistic_normal(n = 100, mu = mu_2, Sigma = Sigma_2))\n\nmu_3 = c(0, 0)\nSigma_3 = matrix(c(0.5, 0.3, 0.3, 1), nrow=2, byrow=TRUE)\ndata_3 = data.frame(true_model = 3, \n                    rlogistic_normal(n = 100, mu = mu_3, Sigma = Sigma_3))\n\ndata = rbind(data_1, data_2, data_3)\ncolnames(data) = c(\"true_model\", \"pmp_1\", \"pmp_2\", \"pmp_3\")\ndata$pmp = with(data, make_list_column(pmp_1, pmp_2, pmp_3))\n\ndf_logistic_normal = data.frame(true_model = 1:3)\ndf_logistic_normal$mu = list(mu_1, mu_2, mu_3)\ndf_logistic_normal$Sigma = list(Sigma_1, Sigma_2, Sigma_3)\n```\n:::\n\n\n\nThe actual plotting is straightforward again. We tell `stat_simplex_density` that we want a `dlogistic_normal` density function and pass the `mu` and `Sigma` columns of the `df_logistic_normal` data frame containing the parameters for each facet.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1))+\n  theme_void() +\n  geom_simplex_canvas() + \n  stat_simplex_density(data=df_logistic_normal, fun = dlogistic_normal,\n                       args = alist(mu = mu, Sigma = Sigma)) +\n  geom_simplex_point(data = data, aes(pmp = pmp),\n                   size = 0.7, color = \"firebrick\", alpha = 0.3) +\n  facet_grid(~true_model, labeller=label_both)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n## Issue Tracker\n\nPlease keep in mind that the [`{ggsimplex}`](https://github.com/marvinschmitt/ggsimplex) package is in a very early stage. If it wasn't for the [AISTATS paper on Meta-Uncertainty in Bayesian Model Comparison](https://arxiv.org/pdf/2210.07278.pdf), I would not have pre-released this immature package. That being said, bug reports and feature requests are always welcome at the [GitHub Issues Page](https://github.com/marvinschmitt/ggsimplex/issues). All issue reports are appreciated and will be considered for the actual package release. Please do not expect them to be fixed *anytime soon*, though.\n\n## Outlook\n\nThe [`{ggsimplex}`](https://github.com/marvinschmitt/ggsimplex) package is designed as a ggplot extension. This means that it follows the ggplot interfaces, which makes it compatible with other ggplot-based packages such as `{gganimate}`. More on that in another post when [`{ggsimplex}`](https://github.com/marvinschmitt/ggsimplex) development has advanced further.\n\nThis blog post covered the elementary pre-beta functionality of the [`{ggsimplex}`](https://github.com/marvinschmitt/ggsimplex) package. Expect large (and breaking) changes to happen in the future. Thank you for reading! If you enjoy content like this, follow me on [Twitter (@MarvinSchmittML)](https://twitter.com/MarvinSchmittML) or [LinkedIn (Marvin Schmitt)](https://www.linkedin.com/in/marvin-schmitt-a85b321a2/).\n\nCheers,\n\nMarvin\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}